!<arch>
0-isupper.c/    0           0     0     644     255       `
#include "main.h"
#include <stdio.h>
/**
 * _isupper - checks for uppercase character
 * @c: The character to print
 *
 * Return: 1 if upper case found else 1
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);

	}
	else
		return (0);
}

0-memset.c/     0           0     0     644     437       `
#include "main.h"
/**
* _memset - Fills the first n bytes of the memory area
*	pointed to by @s with the constant byte @c.
* @s: A pointer to the memory area to be filled.
* @b: The character to fill the memory area with.
* @n: The number of bytes to be filled.
*
* Return: A pointer to the filled memory area @s.
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;

	return (s);
}

0-strcat.c/     0           0     0     644     388       `
#include "main.h"

/**
  * _strcat - Concatenates two strings
  * @dest: The destination string
  * @src: The source string
  *
  * Return: A pointer to the resulting string dest
  */
char *_strcat(char *dest, char *src)
{
	int dlen = 0, i;

	while (dest[dlen])
	{
		dlen++;
	}

	for (i = 0; src[i] != 0; i++)
	{
		dest[dlen] = src[i];
		dlen++;
	}

	dest[dlen] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     470       `
#include "main.h"
/**
 * _atoi - Convert a string to an integer.
 * @s: The pointer to convert
 *
 * Return: A integer
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int total = 0;
	char test = 0;

	while (*s)
	{
		if (*s == '-')
			sign = sign * -1;
		if (*s >= '0' && *s <= '9')
		{
			test = 1;
			total = total * 10 + *s - '0';
		}
		else if (*s < '0' || *s > '9')
		{
			if (test)
				break;
		}
		s++;
	}
	if (sign < 0)
		total = (-(total));
	return (total);
}
1-isdigit.c/    0           0     0     644     241       `
#include "main.h"
#include <stdio.h>
/**
 * _isdigit - checks for digit
 * @c: The character to print
 *
 * Return: 1 if upper case found else 1
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);

	}
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     341       `
#include "main.h"
/**
 * _memcpy - copies memory area
 * @dest: character array to copy to
 * @src: character array to copy from
 * @n: how many bytes to copy
 * Return: the pointer to the char array
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}

1-strncat.c/    0           0     0     644     551       `
#include "main.h"

/**
 * _strncat - Concatenates two strings using at most
 *            an inputted number of bytes from src.
 * @dest: The string to be appended upon.
 * @src: The string to be appended to dest.
 * @n: The number of bytes from src to be appended to dest.
 *
 * Return: A pointer to the resulting string dest.
 */
char *_strncat(char *dest, char *src, int n)
{
	int index = 0, dest_len = 0;

	while (dest[index++])
		dest_len++;

	for (index = 0; src[index] && index < n; index++)
		dest[dest_len++] = src[index];

	return (dest);
}

2-strchr.c/     0           0     0     644     364       `
#include "main.h"
/**
 * _strchr -  locates a character in a string
 *
 * @s: pointer to a string
 * @c: the char we want to find in s
 * Return: the first occurrence of c in s or null if not found
 *
 */
char *_strchr(char *s, char c)
{
	int index;

	for (index = 0; s[index] >= '\0'; index++)
	{
		if (s[index] == c)
			return (s + index);
	}

	return ('\0');
}
2-strlen.c/     0           0     0     644     272       `
#include "main.h"
/**
 * _strlen - Returns the length of a string.
 * @s: The string to get the length of.
 * @ length:the length
 *
 * Return: The length of @s.
 */
int _strlen(char *s)
{
	int length = 0;

	while (*s != '\0')
	{
		length++;
		s++;
	}
	return (length);
}
2-strncpy.c/    0           0     0     644     490       `
#include "main.h"
/**
 * _strncpy - Copies at most an inputted number
 *            of bytes from string src into dest.
 * @dest: The buffer storing the string copy.
 * @src: The source string.
 * @n: The maximum number of bytes to copied from src.
 *
 * Return: A pointer to the resulting string dest.
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i =  0;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];

	for ( ; i < n; i++)
		dest[i] = '\0';

	return (dest);
}
3-islower.c/    0           0     0     644     220       `
#include "main.h"
/**
 * _islower(int c)- checks for lowercase character
 * @c: The character to check
 *
 * Return: 1 (Success)
 */
int _islower(int c)
{
	if (c <= 'z' && c >= 'a')
		return (1);
		else
			return (0);
}
3-puts.c/       0           0     0     644     178       `
#include "main.h"
/**
 * _puts - Prints a string to stdout.
 * @str: The string to be printed.
 */
void _puts(char *str)
{
	while (*str)
		_putchar(*str++);

	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     299       `
#include "main.h"
/**
 * _strcmp - function that compares two strings.
 * @s1: first string.
 * @s2: second string.
 *
 * Return: 0 or 1.
 */
int _strcmp(char *s1, char *s2)
{
	int j;

	for (j = 0; s1[j] != '\0' && s2[j] != '\0'; j++)
		if (s1[j] != s2[j])
			return (s1[j] - s2[j]);
	return (0);
}

3-strspn.c/     0           0     0     644     455       `
#include "main.h"
/**
 * _strspn - gets the length of a prefix substring
 * @s: character array to check
 * @accept: character array to check for
 * Return: the number of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int b = 0;
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				b++;
				break;
			}

			else if (accept[i + 1] == '\0')
				return (b);
		}

		s++;
	}

	return (b);
}

4-isalpha.c/    0           0     0     644     247       `
#include "main.h"
/**
 * _isalpha(int c)- checks for lowercase or uppercase
 * @c: The character to check
 *
 * Return: 1 (Success)
 */
int _isalpha(int c)
{
	if ((c < 'z' && c > 'a') || (c < 'Z' && c > 'A'))
		return (1);
		else
			return (0);
}

4-strpbrk.c/    0           0     0     644     470       `
#include "main.h"

/**
 * _strpbrk - Searches a string for any of a set of bytes.
 * @s: The string to be searched.
 * @accept: The set of bytes to be searched for.
 *
 * Return: If a set is matched - a pointer to the matched byte.
 *         If no set is matched - NULL.
 */

char *_strpbrk(char *s, char *accept)
{
	int index;

	while (*s)
	{
		for (index = 0; accept[index]; index++)
		{
			if (*s == accept[index])
				return (s);
		}

		s++;
	}

	return ('\0');
}

5-strstr.c/     0           0     0     644     535       `
#include "main.h"
/**
 * _strstr -  locates a substring
 * @haystack: string to check
 * @needle: substring to check for
 * Return: a pointer to beginning of located substring or 0
 */
char *_strstr(char *haystack, char *needle)
{
	int index;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		index = 0;

		if (haystack[index] == needle[index])
		{
			do {
				if (needle[index + 1] == '\0')
					return (haystack);

				index++;

			} while (haystack[index] == needle[index]);
		}

		haystack++;
	}

	return ('\0');
}

6-abs.c/        0           0     0     644     250       `
#include "main.h"
/**
 * _abs - compute the absolute value of a given number
 * @i: integer to compute absolute number
 *
 * Return: absolute value of the input number.
 */
int _abs(int i)
{
	if (i < 0)
		i = -i;
	if (i >= 0)
		i = i;
	return (i);
}
9-strcpy.c/     0           0     0     644     529       `
#include "main.h"
int _strlen(char *s);
/**
 * _strcpy - copies the string pointed to by src to buffer
 * @src: pointer to string
 * @dest: pointer to buffer
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int len = _strlen(src);
	int c;

	for (c = 0; c <= len; c++)
		dest[c] = src[c];
	return (dest);
}

/**
 * _strlen - returns the length of a string
 * @s: pointer to string
 *
 * Return: The length of the string
 */
int _strlen(char *s)
{
	int c = 0;

	while (s[c] != '\0')
		c++;
	return (c);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

